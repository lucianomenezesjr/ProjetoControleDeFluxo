// <auto-generated />
using System;
using ControleAcessoAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ControleAcessoAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ControleAcessoAPI.Models.Aluno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TurmaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TurmaId");

                    b.ToTable("Alunos");
                });

            modelBuilder.Entity("ControleAcessoAPI.Models.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<int>("CargaHoraria")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("ControleAcessoAPI.Models.RegistroAcesso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcessoAutorizadoPorId")
                        .HasColumnType("integer");

                    b.Property<int>("AlunoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataSaida")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Observacoes")
                        .HasColumnType("text");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AcessoAutorizadoPorId");

                    b.HasIndex("AlunoId");

                    b.ToTable("RegistrosAcesso");
                });

            modelBuilder.Entity("ControleAcessoAPI.Models.RequisicaoDeAcesso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataSaida")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataSolicitacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Motivo")
                        .HasColumnType("text");

                    b.Property<int?>("RequisicaoPorId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("RequisicaoPorId");

                    b.ToTable("RequisicoesDeAcesso");
                });

            modelBuilder.Entity("ControleAcessoAPI.Models.Turma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<int>("CursoId")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("HoraEntradaPadrao")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("HoraSaidaPadrao")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CursoId", "Nome")
                        .IsUnique();

                    b.ToTable("Turmas");
                });

            modelBuilder.Entity("ControleAcessoAPI.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Funcao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ControleAcessoAPI.Models.Aluno", b =>
                {
                    b.HasOne("ControleAcessoAPI.Models.Turma", "Turma")
                        .WithMany("Alunos")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("ControleAcessoAPI.Models.RegistroAcesso", b =>
                {
                    b.HasOne("ControleAcessoAPI.Models.Usuario", "AcessoAutorizadoPor")
                        .WithMany("RegistrosAutorizados")
                        .HasForeignKey("AcessoAutorizadoPorId");

                    b.HasOne("ControleAcessoAPI.Models.Aluno", "Aluno")
                        .WithMany("Registros")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcessoAutorizadoPor");

                    b.Navigation("Aluno");
                });

            modelBuilder.Entity("ControleAcessoAPI.Models.RequisicaoDeAcesso", b =>
                {
                    b.HasOne("ControleAcessoAPI.Models.Aluno", "Aluno")
                        .WithMany("Requisicoes")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControleAcessoAPI.Models.Usuario", "RequisicaoPor")
                        .WithMany("RequisicoesFeitas")
                        .HasForeignKey("RequisicaoPorId");

                    b.Navigation("Aluno");

                    b.Navigation("RequisicaoPor");
                });

            modelBuilder.Entity("ControleAcessoAPI.Models.Turma", b =>
                {
                    b.HasOne("ControleAcessoAPI.Models.Curso", "Curso")
                        .WithMany("Turmas")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("ControleAcessoAPI.Models.Aluno", b =>
                {
                    b.Navigation("Registros");

                    b.Navigation("Requisicoes");
                });

            modelBuilder.Entity("ControleAcessoAPI.Models.Curso", b =>
                {
                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("ControleAcessoAPI.Models.Turma", b =>
                {
                    b.Navigation("Alunos");
                });

            modelBuilder.Entity("ControleAcessoAPI.Models.Usuario", b =>
                {
                    b.Navigation("RegistrosAutorizados");

                    b.Navigation("RequisicoesFeitas");
                });
#pragma warning restore 612, 618
        }
    }
}
